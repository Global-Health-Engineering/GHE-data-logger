[
  {
    "objectID": "index.html#sec-constraints",
    "href": "index.html#sec-constraints",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "1.1 Constraints",
    "text": "1.1 Constraints\n\nUse Case: The device was initially meant able to work in two different scenarios with different sensors: \n\n1: Two sensors for biogas digesters: a flow sensor and a composition sensor\n2: Two sensors for improved cookstoves: a weight scale and a temperature sensor\nLater development focused solely on the first scenario, with only the two biogas sensors connected.\n\nPower: As these sensors are likely located in rural or semi-rural areas, access to electricity can’t be guaranteed. Therefore, the device needs to be powered by solar panels ideally and surely be connected to a battery, while not drawing too much power.\nInternet Access: Furthermore, internet access needs to be via cellular using a SIM card, with LTE and/or 4G preferably. As this connection could be volatile, data needs to be backed up locally as well.\nData Redundancy: As even cellular internet connections can have weak or no signal, for reliability and redundancy, data needs to be backed up locally to storage.\nCost: The device should be relatively cheap to produce and maintain.\nQuantity: About 200 devices are meant to be deployed, and therefore the solution needs to be easily scalable."
  },
  {
    "objectID": "index.html#sec-components",
    "href": "index.html#sec-components",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "2.1 Components",
    "text": "2.1 Components\nFor our device, the needed components were identified as follows:\n\nA microcontroller: the ESP32 was chosen over an Arduino for the cheaper price, better performance and reliability, Bluetooth and wifi connectivity, and smaller footprint. Here, the ESP32-DevKitC-V4 development board was the best choice.\nA Micro SD card with connector: a regular Micro SD card was chosen with a breakout board, with the Adafruit MicroSD card breakout board+ being the simplest and most straight-forward solution.\nA Real-Time Clock (RTC): for precise time-keeping without constant internet connection, an RTC is needed. With a separate battery, this keeps running even if the microcontroller is powered off. Here, the Adafruit DS1307 RTC Breakout is a good start. However, as the DS1307 is quite cheap, it may lose or gain up to 2 seconds per day. Therefore, the Adafruit DS3231 Precision RTC Board, although a little more expensive, is used in the PCB designs (see Chapter 3).\nA SIMCOM module: while the ESP32 has built-in wifi and bluetooth capabilities (which is super useful for testing), we still need cellular internet connectivity. Finding a good module for this turned out to be quite tricky, as most data logging applications work over wifi only. The leading manufacturer of cellular wireless modules seems to be SIMCom, whose product is also used by Smart Biogas. As SIMCom doesn’t manufacture ready-to-use breakout boards for their chip, the BK-A7670E board by AND Technologies was chosen for the support of GSM/GPRS, LTE and 4G, the cheap price tag of about 15 Fr. and the good reviews by buyers.\nA Power Bank: Wherever power may come from, it could not be reliant and therefore we need some sort of battery. The Varta Power Bank Energy 20000 was chosen for reliability, price tag and capacity (20’000mAh should be plenty for a simple circuit). It can easily power circuits via the USB connector on the ESP32 dev board or an adapted USB cable with pin ends."
  },
  {
    "objectID": "index.html#sec-esp32-devkitc-v4",
    "href": "index.html#sec-esp32-devkitc-v4",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "2.2 ESP32-DevKitC-V4",
    "text": "2.2 ESP32-DevKitC-V4\nAs mentioned, the ESP32-DevKitC-V4 development board is used for this project. A full documentation for this microcontroller board can be found here: https://docs.espressif.com/projects/esp-idf/en/stable/esp32/hw-reference/esp32/get-started-devkitc.html.\nThe layout of this board is shown in Figure 1. The EN button is really useful to reset the board when it’s not working as it should. The GPIO numbers and power pins are printed on the board and correspond the pin numbers used in this documentation.\n\n\n\n\n\n\nFigure 1: The functional overview of the ESP32-DevKitC-V4 Development Board. Source: Espressif ESP32-DevKitC Documentation\n\n\n\nThe pin layout of this board is shown in more detail in Figure 2. Important for this project:\n\nPower & Ground: The board can be powered via (1) the Micro USB port from a laptop or powerbank, (2) the 5V pin with 5V or (3) the 3V3 power pins with 3.3V. It needs to be grounded via either (1) the USB port or (2) on of the three GND pins. All of these pins can also be used to power components (done in this project).\nIMPORTANT: only power the board via one and only one of the options above, otherwise it can be damaged.\nAnalog Pins: GPIOs 36, 39, 34, 35, 32, 33, 25, 26, 27, 14, 12, 13, 4, 0, 2, and 15 (labeled with ADCX_X) are connected to an onboard ADC and can take analog voltage inputs from 0V to 3.3V, but can only distinguish between values from about 0.15V - 3.1V. For the flow meter attachment to the data logger, ADC pin GPIO 2 was chosen. For more info on ESP32 analog inputs, this tutorial is very helpful.\nI2C pins: GPIOs 21 (WIRE_SDA) and 22 (WIRE_SCL) are the default pins for I2C communication. Any other pins can be assigned I2C, which has to be done manually in the code, as shown in Section 2.4.3.1. For more info on ESP32 I2C communication, see here.\nSPI pins: The ESP has two default SPI interfaces: VSPI and HSPI. For this project, VSPI (GPIOs 23, 19, 18, and 5) is used for the MicroSD card. For more info on ESP32 SPI communication, see here.\nUART pins: UART (Serial) communication is needed for the cellular module (BK-A7670E). The ESP has two designated serial pins with GPIO 1 and 3, which are conveniently labeled TX (transmit) and RX (receive) respectively. This is a nice tutorial on ESP32 UART communication.\n\n\n\n\n\n\n\nFigure 2: The pin layout of the ESP32-DevKitC-V4. Source: Espressif ESP32-DevKitC Documentation"
  },
  {
    "objectID": "index.html#sec-data-logger-breadboard",
    "href": "index.html#sec-data-logger-breadboard",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "2.3 Data Logger Breadboard",
    "text": "2.3 Data Logger Breadboard\nThe components mentioned above were connected on a breadboard as shown in Figure 3, together with the Adafruit 9DOF which provided gyroscope data (pitch, roll and heading) for easy testing. The flow- or composition sensors, which were developed simultaneously to this project, both give analog output signals which can be connected to any ADC pin on the ESP32 Board (see the Espressif Documentation for pin layout). For the flow meter, GPIO 2 was chosen, but this can easy be changed. The individual connections for the signals are listed in Table 1 and also shown schematically in Figure 4. To learn more about the different signal types the boards are using, click on the links in the table. Note that the power connections (5V and GND as all components can work on 5V) are not listed in Table 1 or Figure 4, but shown in Figure 5. To power the entire circuit, the ESP32 was simply connected via the Micro USB to either a laptop (also for code upload and data printout) or the VARTA powerbank. Alternatively, using the white USB cable with power pin ends, the circuit (including the ESP32) can be powered by supplying 5V and GND to any of the respective rails. IMPORTANT: Do not power the circuit with USB and external power simultaneously, as this will probably damage the microcontroller.\n\n\n\n\n\n\nFigure 3: The breadboard data logger prototype\n\n\n\n\n\n\n\n\n\nFigure 4: The circuit of the data logger prototype breadboard, made with Cirkit Designer\n\n\n\n\n\n\nTable 1: The individual connections for the breadboard prototype\n\n\n\n\n\nComponent\nPin\nESP32 GPIO\nSignal Type\n\n\n\n\nFlow Sensor (not shown)\nAnalog Output\n2\nAnalog\n\n\nAdafruit 9DOF Sensor\nSDA\n21\nI2C\n\n\nAdafruit 9DOF Sensor\nSCL\n22\nI2C\n\n\nAdafruit RTC DS1307\nSDA\n33\nI2C\n\n\nAdafruit RTC DS1307\nSCL\n32\nI2C\n\n\nAdafruit MicroSD\nCS\n5\nSPI\n\n\nAdafruit MicroSD\nDI\n23\nSPI\n\n\nAdafruit MicroSD\nDO\n19\nSPI\n\n\nAdafruit MicroSD\nCLK\n18\nSPI\n\n\nBK-A7670E\nT\nRXD\nUART\n\n\nBK-A7670E\nR\nTXD\nUART\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: The circuit of the data logger prototype breadboard with all power connections, made with Cirkit Designer\n\n\n\n\n2.3.1 Breadboard for the flow meter\nTo attach the flow meter to the data logger breadboard and remove the Adafruit 9DOF sensor, the following steps are done:\n\nThe Adafruit 9DOF is removed from the circuit with all connections\nThe RTC is moved to the default I2C pins 21 and 22, as they are no longer occupied by the 9DOF.\nThe flow meter is connected to 5V and GND and then to pin 2\n\nThe readout of the values is then done with the code datalogger_flowmeter.ino described in Section 2.4.3.2.\nThis circuit is shown below in Figure 6, with all needes power and ground connections\n\n\n\n\n\n\nFigure 6: The circuit for the flowmeter data logger, made with Cirkit Designer"
  },
  {
    "objectID": "index.html#sec-code-and-software",
    "href": "index.html#sec-code-and-software",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "2.4 Code and Software",
    "text": "2.4 Code and Software\nAll code was written and edited in Arduino IDE 2.3.2, which can be downloaded here: https://www.arduino.cc/en/software.\nThe quick start to use the breadboard data logger is described next in Section 2.4.1; go to Section 2.4.3 for the details on the code.\n\n2.4.1 Breadboard Quick Start\nMake sure to be on ETH premises for the ETH IoT Wifi to work\n\nGo to google.com and log into this account:\n\nEmail: See datalogger_credentials.pdf Item 3\nPW: See datalogger_credentials.pdf Item 4\n\nLogged into the above Google account, go to this spreadsheet\nOpen /src/datalogger_9DOF/datalogger_9DOF.ino in Arduino IDE\nMake sure the libraries and boards mentioned in the code are installed in Arduino IDE\nConnect the breadboard to the computer via the microUSB on the ESP32\nMake sure the board and port are recognized in Arduino IDE\nMake sure all cables on the breadboard are properly connected.\nUpload the sketch to the board\n\nThe data should then automatically be uploaded to Google Sheets every 2 seconds. You can tilt the breadboard around a bit to see how the pitch, roll, and heading values change.\n\n\n2.4.2 Google Sheets Connection\nData is being logged to Google Sheets using a Google Service Account and the Google Sheets API. Mainly done using this tutorial by Sara Santos.\n\n2.4.2.1 Google Account\nFor the Google Sheets connection, a Google account is needed. I created a business account for this project:\n\nName: See datalogger_credentials.pdf Item 1\nBirthday: See datalogger_credentials.pdf Item 2\nEmail: See datalogger_credentials.pdf Item 3\nPW: See datalogger_credentials.pdf Item 4\nRecovery Email: See datalogger_credentials.pdf Item 5\n\n\n\n2.4.2.2 Google Cloud\nThe connection is based on Google Cloud: https://console.cloud.google.com/welcome\n\n2.4.2.2.1 Google Cloud Project\nFirst, a project was created in Google Cloud. When logged into Google Cloud with the GHE Datalogging account, make sure the project esp32-datalogger-tests is selected in the top left as shown in Figure 7 :\n\n\n\n\n\n\nFigure 7: The selected projct “esp32-datalogger-tests” in Google Cloud\n\n\n\n\n\n2.4.2.2.2 Google Service Account for the project\nFor the project, a Google Service Account was created here: https://console.cloud.google.com/iam-admin/serviceaccounts?authuser=7&orgonly=true&project=esp32-datalogger-tests&supportedpurview=project,organizationId,folder\n\nName: See datalogger_credentials.pdf Item 6\nDescription: See datalogger_credentials.pdf Item 7\nEmail: See datalogger_credentials.pdf Item 8\nUnique ID: See datalogger_credentials.pdf Item 9\n\n\n\n2.4.2.2.3 Google Service Account Key\nFurthermore, a key was created for the Service Account at https://console.cloud.google.com/iam-admin/serviceaccounts/details/103211502601500271707/keys?authuser=7&orgonly=true&project=esp32-datalogger-tests&supportedpurview=project,organizationId,folder and is shown below.\nYou can find the full key in the Google Drive at /src/esp32-datalogger-tests-53555427019f.json or in datalogger_credentials.pdf Item 10.\nFor key, see datalogger_credentials.pdf Item 10\n\n\n2.4.2.2.4 APIs\nFor the connection to work, two APIs were enabled in Google Cloud Project:\n\nGoogle Drive API: https://console.cloud.google.com/apis/library/drive.googleapis.com\nGoogle Sheets API: https://console.cloud.google.com/apis/library/sheets.googleapis.com\n\n\n\n\n2.4.2.3 Google Sheets\nFinally, a Google Spreadsheet was created in the regular Google Drive of the GHE Datalogging account (see Section 2.4.2.1 ):\nFor the spreadsheet link, See datalogger_credentials.pdf Item 12\nThis was then shared with the Google Service Account using the client_email from the key (/src/esp32-datalogger-tests-53555427019f.json)\n\nclient_email: See datalogger_credentials.pdf Item 8\nSpeadsheet ID: See datalogger_credentials.pdf Item 11\n\n\n\n\n2.4.3 Microcontroller Code\nIn /src, the following Arduino Code folders - each with their respective .ino file - can be found:\n\ndatalogger_9DOF (code described in Section 2.4.3.1) To use the breadboard with the Adafruit 9DOF sensor as described in Section 2.3.\ndatalogger_flowmeter (code described in Section 2.4.3.2) To use the breadboard (and the PCBs) with the flow meter on pin 2\nanalog_readout_simple (code described in Section 2.4.3.3) To simply read out the flow meter values to the Arduino IDE serial Monitor\n\n\n2.4.3.1 datalogger_9DOF.ino\nThe main code for the breadboard data logger - to read the 9DOF values, attach the RTC time stamp, save them to the MicroSD card and send them to Google Sheets - is located in datalogger_9DOF.ino .\nSee Section 2.4.1 for the quick start with the breadboard.\nAfter uploading the code, you can disconnect the board from the computer and power it with the power bank or any other 5V source. If no new measurements are appearing in Google Sheets, briefly click the EN button on the ESP32 board and wait for it to reset.\nCommon issues and stuff to check:\n\nCheck that the ESP32 has stable connection to the ETH IoT network or any other wifi source that you specified in the code\nCheck that all cables on the breadboard are properly connected\nCheck that Google Sheets is actually refreshing\nCheck that the board has enough power\n\nThe code is basically a fusion of different snippets of the libraries and sources mentioned at the start of the code. It is explained line by line in the following:\nLines 1 - 35: Info and Sources\n/*\n  ESP32 Data Logger with Adafruit 9DOF sensor, by Till Häussner\n\n  SOURCES for the code parts:\n  - Google Sheets Client: Rui Santos, https://RandomNerdTutorials.com/esp32-datalogging-google-sheets/\n                  Adapted from the examples of the Library Google Sheet Client Library for Arduino devices: https://github.com/mobizt/ESP-Google-Sheet-Client\n  - Adafruit 9DOF Sensor Library: https://github.com/adafruit/Adafruit_9DOF\n                  Specifically the code example pitchrollheading.ino\n  - I2C Scanning and Debugging: Rui Santos, https://randomnerdtutorials.com/esp32-i2c-communication-arduino-ide/\n  - Adafruit RTC DS1307 Library: https://github.com/adafruit/RTClib\n  - microSD integration: Rui Santos, https://randomnerdtutorials.com/esp32-microsd-card-arduino/\n\n  REQUIRED LIBRARIES (install by searching for name in Arduino IDE -&gt; Library Manager):\n  - SD (1.2.4) by Arduino, SparkFun: https://www.arduino.cc/reference/en/libraries/sd/\n                  for SD card support\n  - Adafruit 9DOF (1.1.4) by Adafruit: https://github.com/adafruit/Adafruit_9DOF\n                  for the 9DOF breakout board by Adafruit\n  - Adafruit L3GD20 U (2.0.3) by Adafruit: https://github.com/adafruit/Adafruit_L3GD20_U\n                  Driver for the gyro on the 9DOF breakout board by Adafruit\n  - Adafruit LSM303DLHC (1.0.4) by Adafruit: https://github.com/adafruit/Adafruit_LSM303DLHC\n                  Old driver for 9DOF breakout board (see README on GitHub for newer libraries), but still works.\n  - Adafruit BusIO (1.16.1) by Adafruit: https://github.com/adafruit/Adafruit_BusIO\n                  for SPI and I2C abstraction\n  - Adafruit Unified Sensor (1.1.14) by Adafruit: https://github.com/adafruit/Adafruit_Sensor\n                  For sensor compatibility and abstraction\n  - RTClib (2.1.4) by Adafruit: https://github.com/adafruit/RTClib\n                  For RTC DS1307, also support others\n  - ESP-Google-Sheet-Client (1.4.4) by Mobizt: https://github.com/mobizt/ESP-Google-Sheet-Client\n                  For Google Sheets Connection\n  \n  REQUIRED BOARD PACKAGES (install by searching for name in Arduino IDE -&gt; Boards Manager):\n  - esp32 by Espressif: https://github.com/espressif/arduino-esp32\n                  For ESP32 support in Arduino IDE\n  \n*/\nLines 37 - 69: Import necessary libraries\n// _______ LIBRARIES ________________________________________________________\n// Arduino:\n#include &lt;Arduino.h&gt;\n//\n// For ESP32 wifi connection:\n#include &lt;WiFi.h&gt;\n//\n// For Adafruit 9DOF sensor, from example: Adafruit 9DOF -&gt; pitchrollheading, see https://github.com/adafruit/Adafruit_9DOF\n#include &lt;Adafruit_Sensor.h&gt;\n#include &lt;Adafruit_LSM303_U.h&gt;\n#include &lt;Adafruit_L3GD20_U.h&gt;\n#include &lt;Adafruit_9DOF.h&gt;\n//\n// For NTP timestamp\n// commented out, as th time stamp was taken from the RTC.\n// if you want to use the NTP server for the time stamp (which requires internet connection),\n// uncomment\n// #include \"time.h\"\n//\n// For RTC DS1307\n#include \"RTClib.h\"\n//\n// For Google Sheets Connection; see https://github.com/mobizt/ESP-Google-Sheet-Client\n#include &lt;ESP_Google_Sheet_Client.h&gt;\n//\n// For SD/SD_MMC mounting helper\n#include &lt;GS_SDHelper.h&gt;\n//\n// For microSD Card\n#include \"FS.h\"\n#include \"SD.h\"\n#include &lt;SPI.h&gt;\n// __________________________________________________________________________\nLines 73 - 77: define Wifi network credentials, currently ETH IoT\n// ______ WIFI CONNECTION______________\n// access to the ETH IOT wifi network\n#define WIFI_SSID \"See datalogger_credentials.pdf Item 13\"\n#define WIFI_PASSWORD \"See datalogger_credentials.pdf Item 14\"\n// ____________________________________\nLines 81 - 96: Define variables for Google Cloud and Spreadsheet connection\n// _______ GOOGLE SHEETS CONNECTION _______________________________________\n// Google Project ID\n#define PROJECT_ID \"esp32-datalogger-tests\"\n// \n// Service Account's client email\n#define CLIENT_EMAIL \"See datalogger_credentials.pdf Item 8\"\n//\n// Service Account's private key\nconst char PRIVATE_KEY[] PROGMEM = \"See datalogger_credentials.pdf Item 10\";\n//\n// The ID of the spreadsheet where you'll publish the data\nconst char spreadsheetId[] = \"See datalogger_credentials.pdf Item 11\";\n//\n// Token Callback function\nvoid tokenStatusCallback(TokenInfo info);\n// ____________________________________________________________________________\nLines 99 - 119: Define NTP time server variables and functions (commented out at the moment, as we get the time from the RTC)\n /*\n// _________ NTP TIME SERVER CONNECTION ___________\n// NTP server to request epoch time\n const char* ntpServer = \"pool.ntp.org\";\n//\n// Variable to save current epoch time\nunsigned long epochTime; \n//\n// Function that gets current epoch time\nunsigned long getTime() {\n  time_t now;\n  struct tm timeinfo;\n  if (!getLocalTime(&timeinfo)) {\n    //Serial.println(\"Failed to obtain time\");\n    return(0);\n  }\n  time(&now);\n  return now;\n}\n// ________________________________________________\n*/\nLines 122 - 139: Define variables for the RTC DS1307\nAs the 9DOF is connected to the breadboard, the RTC had to be moved from the default I2C pins 21 and 22 to the non-default pins 32 and 33 which are specified on lines 128 and 129. If the 9DOF is removed (like in the custom PCBs described in Section 3), the RTC can be connected to the default pins in it’s place and the manual pin assignment can be commented out.\n// ________ REAL TIME CLOCK Adafruit RTC DS1307 __________________\n// I2C Address: (Found using the I2C Scanner by Rui Santos (https://randomnerdtutorials.com/esp32-i2c-communication-arduino-ide/))\n// rtc:   0x69\n//\n// Setting up I2C Connection:\n// Define pins:\n#define SDA_2 33\n#define SCL_2 32\n// create wire instane\n// TwoWire I2Ctwo = TwoWire(1);\n//\n// assign ID\nRTC_DS1307 rtc;\n\n// define weekdays\nchar daysOfTheWeek[7][12] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n\n// ________________________________________________________________\nLines 143 - 203: Define SD card functions\nThe SD Card is connected to the default ESP32 SPI pins (23, 19, 18, 5) which require no further setup.\n// ________ MICRO SD CARD ________________________________________\n// String for data entry\nString dataMessage;\n// Initialize SD card\nvoid initSDCard(){\n   if (!SD.begin()) {\n    Serial.println(\"Card Mount Failed\");\n    return;\n  }\n  uint8_t cardType = SD.cardType();\n\n  if(cardType == CARD_NONE){\n    Serial.println(\"No SD card attached\");\n    return;\n  }\n  Serial.print(\"SD Card Type: \");\n  if(cardType == CARD_MMC){\n    Serial.println(\"MMC\");\n  } else if(cardType == CARD_SD){\n    Serial.println(\"SDSC\");\n  } else if(cardType == CARD_SDHC){\n    Serial.println(\"SDHC\");\n  } else {\n    Serial.println(\"UNKNOWN\");\n  }\n  uint64_t cardSize = SD.cardSize() / (1024 * 1024);\n  Serial.printf(\"SD Card Size: %lluMB\\n\", cardSize);\n}\n// Write to the SD card\nvoid writeFile(fs::FS &fs, const char * path, const char * message) {\n  Serial.printf(\"Writing file: %s\\n\", path);\n\n  File file = fs.open(path, FILE_WRITE);\n  if(!file) {\n    Serial.println(\"Failed to open file for writing\");\n    return;\n  }\n  if(file.print(message)) {\n    Serial.println(\"File written\");\n  } else {\n    Serial.println(\"Write failed\");\n  }\n  file.close();\n}\n// Append data to the SD card\nvoid appendFile(fs::FS &fs, const char * path, const char * message) {\n  Serial.printf(\"Appending to file: %s\\n\", path);\n\n  File file = fs.open(path, FILE_APPEND);\n  if(!file) {\n    Serial.println(\"Failed to open file for appending\");\n    return;\n  }\n  if(file.print(message)) {\n    Serial.println(\"Message appended\");\n  } else {\n    Serial.println(\"Append failed\");\n  }\n  file.close();\n}\n// _______________________________________________________________\nLines 207 - 241: Define the Adafruit 9DOF functions\nThe specific I2C Connection setup is commented out, as the sensor is connected to the default I2C pins on the ESP32 (21 and 22), which are accessed natively. As the Adafruit 9DOF breakout consists of three different chips which all have their individual I2C address (see the top part of the code below), assigning a new gateway on non-default pins manually is quite tricky and the 9DOF was just connected to the default I2C pins. Therefore the RTC, which also communicates via I2C, is connected to the non-default pins 32 and 33, which were defined on lines 128 and 129, and as the RTC is only one chip with a single address, this was quite easy. When the 9DOF is not connected to the circuit (like in the custom PCBs described in Section 3), the RTC is connected to the default I2C pins 21 and 22, and the manual pin assignment on lines 128 and 129 can be commented out.\n// _________ Adafruit 9DOF Sensor ____________________\n// I2C Addresses: (Found using the I2C Scanner by Rui Santos (https://randomnerdtutorials.com/esp32-i2c-communication-arduino-ide/) and the Adafruit Documentation: https://learn.adafruit.com/i2c-addresses/the-list)\n// accel: 0x19\n// mag:   0x1E\n// dof:   0x69\n// \n// Assign a unique ID to the sensors\nAdafruit_9DOF                dof   = Adafruit_9DOF();\nAdafruit_LSM303_Accel_Unified accel = Adafruit_LSM303_Accel_Unified(30301);\nAdafruit_LSM303_Mag_Unified   mag   = Adafruit_LSM303_Mag_Unified(30302);\n//\n// Setting up I2C Connection:\n// Define pins:\n// #define SDA_1 21\n// #define SCL_1 22\n// Create wire instance\n// TwoWire I2C_9dof = TwoWire(0);\n\n// Initialize Sensors\nvoid initSensors()\n{\n  if(!accel.begin())\n  {\n    /* There was a problem detecting the LSM303 ... check your connections */\n    Serial.println(F(\"Ooops, no LSM303 detected ... Check your wiring!\"));\n    while(1);\n  }\n  if(!mag.begin())\n  {\n    /* There was a problem detecting the LSM303 ... check your connections */\n    Serial.println(\"Ooops, no LSM303 detected ... Check your wiring!\");\n    while(1);\n  }\n}\n// ___________________________________________________\nLines 245 - 338 contain the setup() function, which initializes everything on boot. It has the following parts:\nLines 247 - 250: Serial communication setup with baud rate 115200\nSerial communication to the laptop (to view output in the Serial Monitor in Arduino IDE) only works with the ESP32 connected to the laptop via USB. Make sure to select the correct baud rate (115200) to view the output correctly. If the ESP is not connected to the laptop via serial, it still logs data to SD and the Web, you just can’t see the serial output.\nSerial.begin(115200);\nSerial.println();\nSerial.println(\"Setting up hopefully.......\");\nSerial.println();\nLine 252: SD Card Initialization\ninitSDCard();\nLines 254 - 267: I2C Setup\nThis is the first part of setting up the I2C connection to both the RTC and the 9DOF. As the 9DOF is on the default I2C pins, the default line can be chosen in Wire.begin(). The RTC is connected to non-default pins, which were defined previously in variables SDA_2 and SCL_2, and are initialized on Wire1 with Wire1.begin(SDA_2, SCL_2).\n// I2C Setup _______________________________________\n// I2C_9dof.begin(SDA_1, SCL_1, 100000); \n// I2C_rtc.begin(SDA_2, SCL_2, 100000);\n//\n// I2C for Adafruit 9DOF\nWire.begin();\n// I2C for RTC DS1307\nWire1.begin(SDA_2, SCL_2);\nbool status_rtc = rtc.begin(&Wire1);  \nif (!status_rtc) {\nSerial.println(\"Could not find RTC at 0x68\");\nwhile (1);\n}\n// ________________________________________________\nLines 270 - 285: Check that RTC is connected and running\n// RTC DS1307 Setup _______________________________\nif (! rtc.begin(&Wire1)) {\n  Serial.println(\"Couldn't find RTC\");\n  Serial.flush();\n  while (1) delay(10);\n}\nif (! rtc.isrunning()) {\n  Serial.println(\"RTC is NOT running, let's set the time!\");\n  // When time needs to be set on a new device, or after a power loss, the\n  // following line sets the RTC to the date & time this sketch was compiled\n  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));\n  // This line sets the RTC with an explicit date & time, for example to set\n  // January 21, 2014 at 3am you would call:\n  // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));\n}\n// ________________________________________________\nLines 288 - 301: SD card setup and file creation\nChecks if SD card is connected and if a file data.txt (where the data is going to be saved to) exists. If not, it creates a new data.txt file.\n// SD Card Setup: _______________________________________________\n// If the data.txt file doesn't exist\n// Create a file on the SD card and write the data labels\nFile file = SD.open(\"/data.txt\");\nif(!file) {\n  Serial.println(\"File doesn't exist\");\n  Serial.println(\"Creating file...\");\n  writeFile(SD, \"/data.txt\", \"Timestamp, Pitch, Roll, Heading \\r\\n\");\n}\nelse {\n  Serial.println(\"File already exists\");  \n}\nfile.close();\n// ________________________________________________________\nLines 304 - 307: NTP time server setup\nAs we get the time stamp from the RTC, this is commented out. If you want to get the NTP time, please comment out all RTC-related variables and functions, as they might interfere.\n// NTP Server Setup ____________________________\n//Configure NTP time\n//configTime(0, 0, ntpServer);\n// _____________________________________________\nLine 310: 9DOF Sensor Initialization\ninitSensors();\nLines 312 - 337: Wifi and Google Sheets Connection Setup\n// Google Sheets Connection Setup __________________________________________________________\nGSheet.printf(\"ESP Google Sheet Client v%s\\n\\n\", ESP_GOOGLE_SHEET_CLIENT_VERSION);\n//\n// Connect to Wi-Fi\nWiFi.setAutoReconnect(true);\nWiFi.begin(WIFI_SSID, WIFI_PASSWORD);\n//\nSerial.print(\"Connecting to Wi-Fi\");\nwhile (WiFi.status() != WL_CONNECTED) {\n  Serial.print(\".\");\n  delay(1000);\n}\nSerial.println();\nSerial.print(\"Connected with IP: \");\nSerial.println(WiFi.localIP());\nSerial.println();\n//\n// Set the callback for Google API access token generation status (for debug only)\nGSheet.setTokenCallback(tokenStatusCallback);\n//\n// Set the seconds to refresh the auth token before expire (60 to 3540, default is 300 seconds)\nGSheet.setPrerefreshSeconds(10 * 60);\n//\n// Begin the access token generation for Google API authentication\nGSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);\n// ___________________________________________________________________________________\nLines 341 - 344: Set the timer variables\nHere you can set the interval for the data readout, which is timerDelay. The actual interval is timerDelay+1s, so for an interval of 2 seconds per data readout, set timerDelay = 1, and for 1 minute, set timerDelay = 59. Please leave lastTime = 0, as this is just a placeholder for the interval loop.\n// Timer Variables for the data readout ______________\nunsigned long lastTime = 0;  \nunsigned long timerDelay = 1;\n// _______________________________________________________\nLines 347 - 443 contain the loop() function, which is executed over and over again until the microcontroller is given another command.\nLine 349: Createbool for Google Sheets connection\nbool ready = GSheet.ready();\nLine 352: Get time from RTC and store it in variable now\nDateTime now = rtc.now();\nLine 355 Checks if it’s time for a new data readout\nBased on the interval defined in timerDelay on Line 343\nif (ready && now.unixtime() - lastTime &gt; timerDelay){\nIf this returns true, lines 356 to 441 are executed:\nLine 356 Sets lastTime to the current time\nlastTime = now.unixtime();\nLine 358 Sets up the object response for the Google Sheet connection\nFirebaseJson response;\nLines 360 and 361 print a message to the Serial Monitor\nThat the values are being appended to the spreadsheet\nSerial.println(\"\\nAppend spreadsheet values...\");\nSerial.println(\"----------------------------\");\nLine 358 Sets up the object valueRange for the Google Sheet connection.\nIn there, the data row for the spreadsheet will be stored.\nFirebaseJson valueRange;\nLines 368 and 369: Get the NTP timestamp\nCommented out as we use the RTC.\n// Get NTP timestamp; disabled at the moment because we get the timestamp from the RTC\n// epochTime = getTime();\nLines 371 - 386: Build the string for the time stamp\nIf you want a differently formatted time stamp or more/less info, change these lines\n// Create RTC timestamp string ________________\nString timestamp = \"\";\ntimestamp += daysOfTheWeek[now.dayOfTheWeek()];\ntimestamp += \", \";\ntimestamp += now.year();\ntimestamp += '/';\ntimestamp += now.month();\ntimestamp += '/';\ntimestamp += now.day();\ntimestamp += ' ';\ntimestamp += now.hour();\ntimestamp += ':';\ntimestamp += now.minute();\ntimestamp += ':';\ntimestamp += now.second();\n// ____________________________________________\nLines 388 - 407: Get the 9DOF Sensor readings\nThey are stored in the variables dof_pitch, dof_roll, and dof_heading\n// Get sensor readings ____________________________________________\nfloat dof_pitch = 0;\nfloat dof_roll = 0;\nfloat dof_heading = 0;\n//\nsensors_event_t accel_event;\nsensors_event_t mag_event;\nsensors_vec_t   orientation;\naccel.getEvent(&accel_event);\nif (dof.accelGetOrientation(&accel_event, &orientation))\n{\n  dof_pitch = orientation.pitch;\n  dof_roll = orientation.roll;\n}\nmag.getEvent(&mag_event);\nif (dof.magGetOrientation(SENSOR_AXIS_Z, &mag_event, &orientation))\n{\n  dof_heading = orientation.heading;\n}\n// ______________________________________________________________\nLines 410 - 416: Write the data as one line to the SD card\n// write data to SD Card ____________________________________________________________\ndataMessage = timestamp + \",\" + String(dof_pitch) + \",\" + String(dof_roll) + \",\" + String(dof_heading)+ \"\\r\\n\";\nSerial.print(\"Saving data to microSD: \");\nSerial.println(dataMessage);\n//Append the data to file\nappendFile(SD, \"/data.txt\", dataMessage.c_str());\n// ____________________________________________________________________________\nLines 421 - 427: Build the valueRange object for the Google Sheets entry\nHere, the format of the Google Sheet entry is defined and the timestamp and variables are added to different columns\n// create entry array\nvalueRange.add(\"majorDimension\", \"COLUMNS\");\n// add timestamp to array\nvalueRange.set(\"values/[0]/[0]\", timestamp);\nvalueRange.set(\"values/[1]/[0]\", dof_pitch);\nvalueRange.set(\"values/[2]/[0]\", dof_roll);\nvalueRange.set(\"values/[3]/[0]\", dof_heading);\nLines 429 - 441: Add data to Google Sheets\n// For Google Sheet API ref doc, go to https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append\n// Append values to the spreadsheet\nbool success = GSheet.values.append(&response /* returned response */, spreadsheetId /* spreadsheet Id to append */, \"Sheet1!A1\" /* range to append */, &valueRange /* data range to append */);\nif (success){\n    response.toString(Serial, true);\n    valueRange.clear();\n}\nelse{\n    Serial.println(GSheet.errorReason());\n}\nSerial.println();\nSerial.println(ESP.getFreeHeap());\n// ___________________________________________________________________________\nLines 444 - 454: Misc Google Sheets Token code\nHere, the token callback is executed.\n// misc Google Sheets Token code _________________________________________________________\nvoid tokenStatusCallback(TokenInfo info){\n    if (info.status == token_status_error){\n        GSheet.printf(\"Token info: type = %s, status = %s\\n\", GSheet.getTokenType(info).c_str(), GSheet.getTokenStatus(info).c_str());\n        GSheet.printf(\"Token error: %s\\n\", GSheet.getTokenError(info).c_str());\n    }\n    else{\n        GSheet.printf(\"Token info: type = %s, status = %s\\n\", GSheet.getTokenType(info).c_str(), GSheet.getTokenStatus(info).c_str());\n    }\n}\n// ___________________________________________________________________________________\n\n\n2.4.3.2 datalogger_flowmeter.ino\nThis code reads out the analog flow meter values, saves them to the microSD card and sends them to the Cloud. It is very similar to datalogger_9DOF.ino (described in Section 2.4.3.1 above), with the main changes being:\n\nThe Adafruit 9DOF has been removed from the circuit and all related code parts have been deleted and are not required, as the sensor values come from the flow meter.\nThe RTC has been moved from the non-default I2C pins 32 and 33 to the default I2C pins 21 and 22, as the 9DOF is no longer connected to those pins.\n\nHow this changes the code is described as follows:\nLines 1 - 55: The Adafruit 9DOF libraries are no longer required\n/*\n  ESP32 Data Logger with the biogas flow meter, by Till Häussner\n\n  SOURCES for the code parts:\n  - Google Sheets Client: Rui Santos, https://RandomNerdTutorials.com/esp32-datalogging-google-sheets/\n                  Adapted from the examples of the Library Google Sheet Client Library for Arduino devices: https://github.com/mobizt/ESP-Google-Sheet-Client\n  - I2C Scanning and Debugging: Rui Santos, https://randomnerdtutorials.com/esp32-i2c-communication-arduino-ide/\n  - Adafruit RTC DS1307 Library: https://github.com/adafruit/RTClib\n  - microSD integration: Rui Santos, https://randomnerdtutorials.com/esp32-microsd-card-arduino/\n\n  REQUIRED LIBRARIES (install by searching for name in Arduino IDE -&gt; Library Manager):\n  - SD (1.2.4) by Arduino, SparkFun: https://www.arduino.cc/reference/en/libraries/sd/\n                  for SD card support\n  - Adafruit BusIO (1.16.1) by Adafruit: https://github.com/adafruit/Adafruit_BusIO\n                  for SPI and I2C abstraction\n  - Adafruit Unified Sensor (1.1.14) by Adafruit: https://github.com/adafruit/Adafruit_Sensor\n                  For sensor compatibility and abstraction\n  - RTClib (2.1.4) by Adafruit: https://github.com/adafruit/RTClib\n                  For RTC DS1307, also support others\n  - ESP-Google-Sheet-Client (1.4.4) by Mobizt: https://github.com/mobizt/ESP-Google-Sheet-Client\n                  For Google Sheets Connection\n  \n  REQUIRED BOARD PACKAGES (install by searching for name in Arduino IDE -&gt; Boards Manager):\n  - esp32 by Espressif: https://github.com/espressif/arduino-esp32\n                  For ESP32 support in Arduino IDE\n  \n*/\n\n// _______ LIBRARIES ________________________________________________________\n// Arduino:\n#include &lt;Arduino.h&gt;\n//\n// For ESP32 wifi connection:\n#include &lt;WiFi.h&gt;\n//\n// For NTP timestamp\n// commented out, as th time stamp was taken from the RTC.\n// if you want to use the NTP server for the time stamp (which requires internet connection),\n// uncomment\n// #include \"time.h\"\n//\n// For RTC DS1307\n#include \"RTClib.h\"\n//\n// For Google Sheets Connection; see https://github.com/mobizt/ESP-Google-Sheet-Client\n#include &lt;ESP_Google_Sheet_Client.h&gt;\n//\n// For SD/SD_MMC mounting helper\n#include &lt;GS_SDHelper.h&gt;\n//\n// For microSD Card\n#include \"FS.h\"\n#include \"SD.h\"\n#include &lt;SPI.h&gt;\n// __________________________________________________________________________\nLines 193 - 196: The Adafruit 9DOF sensor has been replaced by the analog flow meter, with the corresponding variables:\n// _________ Analog Flow Meter ____________________\nconst int flow_meter_Pin = 2; // Change this to whatever GPIO the flow meter is connected to\nint flow_meter_value = 0;\n// ___________________________________________________\nLines 209 - 239: I2C Setup\nAs the RTC was moved to the default I2C pins as the only I2C component in the circuit, it can run over the default wire.Therefore, the manually assigned Wire1 been commented out (Line 215) and the assignment in rtc.begin() has been removed (Lines 216 and 225)\n// I2C Setup _______________________________________\n// I2C_9dof.begin(SDA_1, SCL_1, 100000); \n// I2C_rtc.begin(SDA_2, SCL_2, 100000);\n//\n// I2C for RTC DS1307\nWire.begin();\n// Wire1.begin(SDA_2, SCL_2);  (commented out as RTC is on default I2C pins)\nbool status_rtc = rtc.begin();  \nif (!status_rtc) {\n  Serial.println(\"Could not find RTC at 0x68\");\n  while (1);\n}\n// ________________________________________________\n\n\n// RTC DS1307 Setup _______________________________\nif (! rtc.begin()) {\n  Serial.println(\"Couldn't find RTC\");\n  Serial.flush();\n  while (1) delay(10);\n}\nif (! rtc.isrunning()) {\n  Serial.println(\"RTC is NOT running, let's set the time!\");\n  // When time needs to be set on a new device, or after a power loss, the\n  // following line sets the RTC to the date & time this sketch was compiled\n  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));\n  // This line sets the RTC with an explicit date & time, for example to set\n  // January 21, 2014 at 3am you would call:\n  // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));\n}\n// ________________________________________________\nLines 242 - 255 MicroSD Card data.txt file Setup\nBecause the sensor values are not pitch, roll, and heading anymore, but a single analog value, the data format for the data.txt file on the microSD card has been changed to just “Timestamp, Value” on Line 249.\n// SD Card Setup: _______________________________________________\n// If the data.txt file doesn't exist\n// Create a file on the SD card and write the data labels\nFile file = SD.open(\"/data.txt\");\nif(!file) {\n  Serial.println(\"File doesn't exist\");\n  Serial.println(\"Creating file...\");\n  writeFile(SD, \"/data.txt\", \"Timestamp, Value \\r\\n\");\n}\nelse {\n  Serial.println(\"File already exists\");  \n}\nfile.close();\n// ________________________________________________________\nLines 342 - 344: Sensor readings\nThe sensor is read out in one simple line with the analogRead() funcion (more info on analog ESP32 inputs here)\n// Get sensor readings ____________________________________________\nflow_meter_value = analogRead(flow_meter_Pin);\n// ______________________________________________________________\nLines 347 - 353: Write data to MicroSD card\nThe dataMessage on line 348 has been changed to just the timestamp and the single value reading\n// write data to SD Card __________________________________________\ndataMessage = timestamp + \",\" + String(flow_meter_value) + \"\\r\\n\";\nSerial.print(\"Saving data to microSD: \");\nSerial.println(dataMessage);\n//Append the data to file\nappendFile(SD, \"/data.txt\", dataMessage.c_str());\n// ________________________________________________________________\nLines 357 - 376: Write data to Google Sheets\nHere as well, the record has been changed to just the timestamp and a single value reading on line 362.\n// Write data to Google Sheets ___________________________________________________\n// create entry array\nvalueRange.add(\"majorDimension\", \"COLUMNS\");\n// add timestamp to array\nvalueRange.set(\"values/[0]/[0]\", timestamp);\nvalueRange.set(\"values/[1]/[0]\", flow_meter_value);\n// For Google Sheet API ref doc, go to https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append\n// Append values to the spreadsheet\nbool success = GSheet.values.append(&response /* returned response */, spreadsheetId /* spreadsheet Id to append */, \"Sheet1!A1\" /* range to append */, &valueRange /* data range to append */);\nif (success){\n    response.toString(Serial, true);\n    valueRange.clear();\n}\nelse{\n    Serial.println(GSheet.errorReason());\n}\nSerial.println();\nSerial.println(ESP.getFreeHeap());\n// ___________________________________________________________________________\n\n\n2.4.3.3 analog_readout_simple.ino\nThis is just a quick sketch to read out the values from Gian’s biogas flow meter to the serial monitor. This does not store the values anywhere else and does not require either the RTC or SD card nor the 9DOF, just the flowmeter and the ESP32 board. The code is largely based on this tutorial by Sara Santos: https://randomnerdtutorials.com/esp32-adc-analog-read-arduino-ide/ and explained in the following:\nLine 3: Define flowmeter pin\nWhich ESP32 pin is the flowmeter connected to? By default, GPIO 2 is chosen.\nconst int flow_meter_Pin = 2;\nLine 4: Initialize value variable\nint value = 0;\nLines 6 - 10: Set up communication with the Arduino IDE Serial Monitor with baud rate 115200:\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  delay(1000);\n}\nLines 12 - 17: Continually read the analog flow meter values and print them to the Serial Monitor, then wait half a second\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  value = analogRead(flow_meter_Pin);\n  Serial.println(value);\n  delay(500);\n}"
  },
  {
    "objectID": "index.html#sec-ghe-data-logger-header-board",
    "href": "index.html#sec-ghe-data-logger-header-board",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "3.1 GHE Data Logger Header Board",
    "text": "3.1 GHE Data Logger Header Board\nThe idea here was to basically create a robust frame for all breakout boards also used in the breadboard prototype with ready-printed connections. A render of the PCB is shown in Figure 8.\n\n\n\n\n\n\nFigure 8: The GHE Data Logger Header Board PCB without the female pin headers\n\n\n\nThis PCB can be ordered without the female headers as Assembly, as there are four small capacitors to protect the power pins, which would be difficult to solder by hand. When ordering, make sure to delete the female headers that are meant to be soldered by hand from the BOM and Pick&Place files. When receiving the printed board like in Figure 8, the next step would be to solder on the female headers (like these ones from Mouser), and the PCB would look like the render in Figure 9 . The breakout boards - specifically the Adafruit RTC DS3231 board and the MicroSD breakout - need to be connected via bent pin headers like this one (in order for them to be mounted vertically onto the PCB like on the breadboard) which also need to be soldered on. This soldering can easily be done as part of a Hackathon or or similar in Malawi, to engage students in electronics and building the data loggers.\n\n\n\n\n\n\nFigure 9: The GHE Data Logger Header Board PCB with the female pin headers\n\n\n\nThe layout of this PCB is very similar to the layout of the breadboard; the individual component connections are shown in Table 2. Only the MicroSD, RTC and sensor connectors are directly connected to the ESP32, all other pins are broken out at the top of the board in one big pin header for easy adjustments. The connector for the cellular module BK-A7670E is also not connected directly, but has it’s own extra header below the big one at the top for proper connections, as I didn’t have time to properly test the cellular module. The fabrication print of the PCB with more visible connections and the dimensions is shown in Figure 10 .\n\n\n\nTable 2: The individual connections for the GHE Data Logger Header Board\n\n\n\n\n\nComponent\nPin\nESP32 GPIO\nSignal Type\n\n\n\n\nSensor 1\nAnalog Output\n4\nAnalog\n\n\nSensor 2\nAnalog Output\n2\nAnalog\n\n\nAdafruit RTC DS3231\nSDA\n21\nI2C\n\n\nAdafruit RTC DS3231\nSCL\n22\nI2C\n\n\nAdafruit MicroSD\nCS\n5\nSPI\n\n\nAdafruit MicroSD\nDI\n23\nSPI\n\n\nAdafruit MicroSD\nDO\n19\nSPI\n\n\nAdafruit MicroSD\nCLK\n18\nSPI\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: The fabricaion print of the GHE Data Logger Header Board PCB"
  },
  {
    "objectID": "index.html#sec-ghe-data-logger",
    "href": "index.html#sec-ghe-data-logger",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "3.2 GHE Data Logger",
    "text": "3.2 GHE Data Logger\nAs a cheaper and more robust option for scalability, a complete PCB was drawn without the need need for external breakout boards for the RTC, MicroSD card and the ESP32, where these components are directly mounted on the board as shown in Figure 11. The individual connections are the same for both PCBs, as shown again in Table 3.\n\n\n\n\n\n\nFigure 11: The GHE Data Logger PCB\n\n\n\n\n\n\nTable 3: The individual connections for the GHE Data Logger\n\n\n\n\n\nComponent\nPin\nESP32 GPIO\nSignal Type\n\n\n\n\nSensor 1\nAnalog Output\n4\nAnalog\n\n\nSensor 2\nAnalog Output\n2\nAnalog\n\n\nRTC DS3231\nSDA\n21\nI2C\n\n\nRTC DS3231\nSCL\n22\nI2C\n\n\nMicroSD Connector\nCS\n5\nSPI\n\n\nMicroSD Connector\nDI\n23\nSPI\n\n\nMicroSD Connector\nDO\n19\nSPI\n\n\nMicroSD Connector\nCLK\n18\nSPI\n\n\n\n\n\n\nOn this PCB, the entire ESP32 development board is integrated directly into the circuit, as seen in the top left of Figure 12 . This reduces cost and materials needed and also makes the board more rebust. All unused connections of the ESP32 are again broken out to a header row at the top. Furthermore, the DS3231 (with the battery connector) and the MicroSD connector are both integrated as well. Like in the Header Board PCB, the BK-A7670E is connected via a header to extra pinouts at the top for easy testing.\n\n\n\n\n\n\nFigure 12: The fabrication print of the GHE Data Logger PCB\n\n\n\nThe schematics and fabrication prints of the DS3231 and the microSD breakout board used for this PCB can be found in hardware/pcb/references. All other sources are listed in the schematics of the respective PCB."
  },
  {
    "objectID": "index.html#test-the-cellular-module-bk-a7670e",
    "href": "index.html#test-the-cellular-module-bk-a7670e",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "4.1 Test the cellular module BK-A7670E",
    "text": "4.1 Test the cellular module BK-A7670E\nUnfortunately, I haven’t had enough time to fully check the cellular module. I spent some time researching different cellular breakout boards, and the BK-A7670E seemed like the best and most affordable option, which was ordered here on AliExpress.\nThe documentation and user manual for the board can be found in /hardware/testing. The software mentioned in the manual (sscom32E) can be found in /software.\nOn the breakout boards, the board is connected regularly to the UART pins TX and RX, but for the PCBs, I just broke out all pins on the BK-A7670E to a separate header and positioned this below the main header for easy prototyping. With this, not only the RX and TX connections can be tested with flexibility but also the PWRKEY and SLEEP pins, which may be needed in order for the cellular not to draw too much power from the circuit and drain the power bank.\nSIM Card: For testing, the easiest thing is probably to order a free prepaid SIM Card. I ordered this one from Yallo, which was super easy and free with some initial credit, which should be plenty for the small amounts of data we are sending."
  },
  {
    "objectID": "index.html#pcb-testing",
    "href": "index.html#pcb-testing",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "4.2 PCB Testing",
    "text": "4.2 PCB Testing\nThe PCBs need to be ordered and tested with the components. Although EasyEDA has many good checks and automatic controls built in to detect mistakes in the connections and layouts, errors can always remain unnoticed. Therefore, the PCB should be checked thoroughly before ordering all 200.\n\n4.2.1 Adjust the code for RTC DS3231\nAs mentioned previously, the RTC DS1307 which was used for the prototypes ( Section 2.3 ) was therefore replaced with the high precision DS3231 in the PCBs. This should work just fine, but needs to be checked. For the GHE Data Logger Header Board, the Adafruit DS3231 Breakout Board needs to be ordered and connected. To work with the DS3231 on both PCBs, use the code from the RTClib by Adafruit (as described here) and go over the RTC parts of the code files datalogger_9DOF.ino (see Section 2.4.3.1) and/or datalogger_flowmeter.ino (see Section 2.4.3.2 ) to make the necessary changes.\n\n\n4.2.2 Test with both sensors\nMake sure - once ready - to connect both sensors and test the PCB in full operation before ordering all 200. This will require minimal code changes to allow for two analog input values. For this, just follow the steps described in Section 2.4.3.2."
  },
  {
    "objectID": "index.html#pcb-improvements",
    "href": "index.html#pcb-improvements",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "4.3 PCB Improvements",
    "text": "4.3 PCB Improvements\nAfter testing, the PCB could be modified further, especially in the following points:\n\nThe entire A7670E could directly be integrated into the board. While this would be quite some work, it would make probably everything cheaper and more robust.\nIf integrating the A7670E into the board is too complicated, the breakout board BK-A7670E could remain connected via a header, but the pins could be connected directly to the ESP.\nThe miscellaneous pinouts could be removed for a final version.\nBoth PCBs have 4 layers currently (top, bottom, GND and Vcc). With some rerouting - especially for the header board - this could be reduced to 2 layers (top and bottom) for cost reduction\nThe PCBs - especially the integrated one - could always be made smaller. Although size should not be a huge concern for this project, as the battery needs some space anyways."
  },
  {
    "objectID": "index.html#arduino-nano",
    "href": "index.html#arduino-nano",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "4.4 Arduino Nano",
    "text": "4.4 Arduino Nano\nThe Arduino Nano boards could also be promising, and for bigger quantities is would be cool to support Arduino as an open-source project over Espressif. Therefore, it could be tried to integrate an Arduino Nano board into the circuit as opposed to an ESP32 board."
  },
  {
    "objectID": "index.html#complete-the-housing",
    "href": "index.html#complete-the-housing",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "4.5 Complete the housing",
    "text": "4.5 Complete the housing\nI modeled a rough housing in Solidworks, with an Assembly together with the power bank to see how everything fits, but this needs to be polished and printed, and the connections with the sensors and the solar panel or other external power source need to be added. The Solidworks and STL files can be found in /hardware/design.\nThe battery could then also be looked at, and the power bank could maybe be replaced by an integrated battery with a direct solar panel connection for cost reduction, but maybe this would overcomplicate things…"
  },
  {
    "objectID": "index.html#hardware-in-the-workshop",
    "href": "index.html#hardware-in-the-workshop",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "4.6 Hardware in the workshop",
    "text": "4.6 Hardware in the workshop\nAll components, boards and other hardware needed can be found in the workshop in the blue box labeled “GHE Data Logger”. There are some soldered boards in there as well, but I’ve found making stable connections with these really tricky and thus stayed with the breadboard. In the small yellow crate there are more headers and other components like this Adafruit Featherwing RTC + SD add-on and other ESPs which can be used for further tinkering. The BK-A7670E cellular module is located in it’s own little bag with both the LTE and GPS antenna."
  },
  {
    "objectID": "index.html#thank-you",
    "href": "index.html#thank-you",
    "title": "Data Logger for Remote Monitoring of Biogas",
    "section": "4.7 Thank you!",
    "text": "4.7 Thank you!\nThank you for pushing this project further! Let’s hope our little box sends data from Malawi one day :)\nTill Häussner,\nZürich, 2024-06-20"
  },
  {
    "objectID": "src/README_src.html",
    "href": "src/README_src.html",
    "title": "\nREADME for /src\n",
    "section": "",
    "text": "README for /src\n\n\nIn the following, the files and folders contained in this directory are briefly described.  The documentation for this project can be found here.  \n\n\nContents\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndatalogger_9DOF\nContains the datalogger_9DOF.ino file with the code for the breadboard datalogger using the Adafruit 9DOF sensor module\n\n\ndatalogger_flowmeter\nContains the datalogger_flowmeter.ino file with the code for using the datalogger with the flow meter\n\n\nanalog_readout_simple\nContains the analog_readout_simple.ino file with the code for a simple readout of the flow meter values to the Adafruit IDE serial monitor\n\n\ndata.txt\nContains sample data collected with datalogger_9DOF.ino on the MicroSD card"
  },
  {
    "objectID": "hardware/README_hardware.html",
    "href": "hardware/README_hardware.html",
    "title": "\nREADME for /hardware\n",
    "section": "",
    "text": "README for /hardware\n\n\nIn the following, the files and folders contained in this directory are briefly described.  The documentation for this project can be found here.  \n\n\nContents\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndesign\nContains the housing and pcb design files. Is explained by its own README inside the folder.\n\n\ntesting\nContains all documentation related to the BK-A7670E cellular module"
  },
  {
    "objectID": "hardware/design/pcb/README_hardware_design_pcb.html",
    "href": "hardware/design/pcb/README_hardware_design_pcb.html",
    "title": "\nREADME for /hardware/design/pcb\n",
    "section": "",
    "text": "README for /hardware/design/pcb\n\n\nIn the following, the files and folders contained in this directory are briefly described.  The documentation for this project can be found here.  \n\n\nContents\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nreferences\nContains the reference schematics of the Adafruit DS3231 and the Adafruit MicroSD Breakout Board+ used for the datalogger PCB\n\n\nGHE_datalogger_headerboard_V1_3Dfiles.zip\nZip file with the 3D files of the GHE Data Logger Header Board PCB\n\n\nGHE_datalogger_headerboard_V1_BOM.csv\nCSV file containing the BOM for the GHE Data Logger Header Board PCB\n\n\nGHE_datalogger_headerboard_V1_GERBER.zip\nZip file containing the GERBER files of the GHE Data Logger Header Board PCB\n\n\nGHE_datalogger_headerboard_V1_pickandplace.csv\nCSV file containing the pick-and-place data for the GHE Data Logger Header Board PCB\n\n\nGHE_datalogger_headerboard_V1_color.pdf\nPDF file with the fabrication print of the GHE Data Logger Header Board PCB in color\n\n\nGHE_datalogger_headerboard_V1.pdf\nPDF file with the fabrication print of the GHE Data Logger Header Board PCB\n\n\nGHE_datalogger_headerboard_V1_schematics.pdf\nPDF file with the schematics of the GHE Data Logger Header Board PCB\n\n\nGHE_datalogger_V1_3Dfiles.zip\nZip file with the 3D files of the GHE Data Logger PCB\n\n\nGHE_datalogger_V1_BOM.csv\nCSV file containing the BOM for the GHE Data Logger PCB\n\n\nGHE_datalogger_V1_GERBER.zip\nZip file containing the GERBER files of the GHE Data Logger PCB\n\n\nGHE_datalogger_V1_pickandplace.csv\nCSV file containing the pick-and-place data for the GHE Data Logger PCB\n\n\nGHE_datalogger_V1_color.pdf\nPDF file with the fabrication print of the GHE Data Logger PCB in color\n\n\nGHE_datalogger_V1.pdf\nPDF file with the fabrication print of the GHE Data Logger PCB\n\n\nGHE_datalogger_V1_schematics.pdf\nPDF file with the schematics of the GHE Data Logger PCB"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "docs",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\n wiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\n wiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter’s License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "hardware/design/README_hardware_design.html",
    "href": "hardware/design/README_hardware_design.html",
    "title": "\nREADME for /hardware/design\n",
    "section": "",
    "text": "README for /hardware/design\n\n\nIn the following, the files and folders contained in this directory are briefly described.  The documentation for this project can be found here.  \n\n\nContents\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\npcb\nContains the pcb design files. Is explained by its own README inside the folder.\n\n\nassembly_box_render.png\n3D render of the box assembly\n\n\nassembly_box_render2.png\nAnother 3D render of the box assembly\n\n\ndatalogger_assembly.SLDASM\nSolidworks Assembly of the box\n\n\nhousing_box.SLDPRT\nSolidworks Part of the housing\n\n\nhousing_box.STL\nSTL file of the housing\n\n\nhousing_lid.SLDPRT\nSolidworks Part of the housing lid\n\n\nhousing_lid.STL\nSTL file of the housing lid\n\n\nvarta_powerbank.SLDPRT\nSolidworks Part of the Varta Powerbank\n\n\nvarta_powerbank.STL\nSTL file of the Varta Powerbank"
  },
  {
    "objectID": "software/README_software.html",
    "href": "software/README_software.html",
    "title": "\nREADME for /software\n",
    "section": "",
    "text": "README for /software\n\n\nIn the following, the files and folders contained in this directory are briefly described.  The documentation for this project can be found here.  \n\n\nContents\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nsscom32E\nContains the sscom32E software for testing the cellular module BK-A7670E as described in /hardware/testing\n\n\nsscom32E.zip\nZip file containing the above mentioned folder"
  }
]